swagger: '2.0'
info:
  title: Dataverse API
  description: Open source research data repository software
  version: "4.4"
#host: dv.sbgrid.org
host: localhost:8080
schemes:
  - https
#  - http
basePath: /api
produces:
  - application/json
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: X-Dataverse-key
paths:
  /admin/settings/:DataCaptureModuleUrl:
    put:
      consumes:
        - application/text
      summary: sets the DCM URL
      description: |
        <p>Sets the base URL for the DCM implementation server.</p>
        <p>Set this value to 'mock' for testing. This will bypass the implementation
        server and set the rsync script to "script goes here" in all cases.</p>
      parameters:
        - name: body
          in: body
          description: The DCM implementation server's base URL.
          required: true
          schema:
            type: string
            example: "https://datacapture.example.org"
        - name: X-Dataverse-key
          in: header
          description: Dataverse API key of admin user.
          required: true
          type: string
      tags:
        - "Data Capture Module"
      responses:
        "200":
          description: "Setting response"
          schema:
            $ref: "#/definitions/DataCaptureModuleUrl"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /dataverses/{id}/uploadmechanisms:
    get:
      summary: gets upload methods
      description: |
        <p>Gets the list of supported upload methods for the dataverse's <i>(small d)</i> datasets.</p>
        <p>Currently, the following methods are supported:
        <ul>
        <li>STANDARD (browser uploads)</li>
        <li>RSYNC</li>
        <li>DROPBOX (requires api key)</li>
        </ul>
        </p>
      parameters:
        - name: id
          in: path
          description: dataverse identifier.
          required: true
          type: string
        - name: X-Dataverse-key
          in: header
          description: Dataverse API key of admin user.
          required: true
          type: string
      tags:
        - "Data Capture Module"
      responses:
        "200":
          description: "Post response"
          schema:
            $ref: "#/definitions/GetUploadMechanisms"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate dataverse with specified id"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    post:
      consumes:
        - application/text
      summary: sets upload methods
      description: |
        <p>Sets the list of supported upload methods for the dataverse's <i>(small d)</i> datasets.</p>
        <p>Currently, the following methods are supported:
        <ul>
        <li>STANDARD browser uploads)</li>
        <li>RSYNC</li>
        <li>DROPBOX (requires api key)</li>
        </ul>
        </p>
      parameters:
        - name: body
          in: body
          description: A colon-separated list of supported upload methods.
          required: true
          schema:
            $ref: "#/definitions/SetUploadMechanismBody"
        - name: id
          in: path
          description: dataverse identifier.
          required: true
          type: string
        - name: X-Dataverse-key
          in: header
          description: Dataverse API key of admin user.
          required: true
          type: string
      tags:
        - "Data Capture Module"
      responses:
        "200":
          description: "Post response"
          schema:
            $ref: "#/definitions/SetUploadMechanisms"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate dataverse with specified id"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /datasets/{id}/dataCaptureModule/rsync:
    get:
      summary: gets an rsync script
      description: |
        <p>The rsync endpoint issues a request for an rsync
        script used by the dataset depositor to upload large sets of files.
        The response includes the user identifier dataset id (primary key), dataset identifier and the script itself.</p>
        <p>The response may take more than a minute since script requests may be
        fulfilled by a cron job. Set the optional sleep parameter accordingly.</p>
        <p>Preconditions:
        <ol>
        <li>The DataCaptureModuleUrl has been set for the Dataverse instance (big D).</li>
        <li>The dataset's parent dataverse (small d) includes "RSYNC" as one of its upload mechanisms.</li>
        <li>The API key belongs to a user who has edit privileges for the dataset.</li>
        <li>If using Apache in front of Glassfish, set ProxyTimeout to 300 in httpd.conf to support longer requests</li>
        </ol>
        </p>
        <p>Actions performed:
        <ol>
        <li>An upload request is sent to the rsync DCM implementation (ur.py). Example:
        {"userId" : "dataverseAdmin", "datasetId" : 57, "datasetIdentifier" : "ZVBNSE"}
        </li>
        <li>After a pause, a script request is sent to the rsync DCM implementation (sr.py).</li>
        <li>If a script is retrieved, it is saved in the dataset's rsyncscript property.</li>
        </ol>
        </p>
        <p>TODO:
        <ol>
        <li>Make the rsync upload and script request endpoints configurable (currently hardcoded in
        DataCaptureModuleServiceBean)</li>
        </ol>
        </p>
      parameters:
        - name: id
          in: path
          description: Dataset id (primary key in database).
          required: true
          type: integer
        - name: X-Dataverse-key
          in: header
          description: Dataverse API key of depositing user.
          required: true
          type: string
        - name: sleep
          in: query
          description: Milliseconds to wait for rsync script to be generated.
          required: false
          default: 0
          type: integer
      tags:
        - "Data Capture Module"
      responses:
        "200":
          description: "Rsync script response"
          schema:
            $ref: "#/definitions/Rsync"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate dataset with specified id"
          schema:
            $ref: "#/definitions/Error"
        "501":
          description: "Rsync not supported"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
    post:
      consumes:
        - application/text
      summary: sets an rsync script
      description: |
        <p>This rsync endpoint issues a request to set the rsync script for a dataset.</p>
        <p>Preconditions:
        <ol>
        <li>The DataCaptureModuleUrl has been set for the Dataverse instance (big D).</li>
        <li>The dataset's parent dataverse (small d) includes "RSYNC" as one of its upload mechanisms.</li>
        <li>The API key belongs to a Dataverse super user.</li>
        </ol>
        </p>
        <p>Actions performed:
        <ol>
        <li>The body of this request is saved in the dataset's rsyncscript property.</li>
        </ol>
        </p>
        </p>
      parameters:
        - name: id
          in: path
          description: Dataset id (primary key in database).
          required: true
          type: integer
        - name: body
          in: body
          description: The rsync script.
          required: true
          schema:
            $ref: "#/definitions/RsyncScriptBody"
        - name: X-Dataverse-key
          in: header
          description: API key of Dataverse super user.
          required: true
          type: string
      tags:
        - "Data Capture Module"
      responses:
        "200":
          description: "Rsync script response"
          schema:
            $ref: "#/definitions/Rsync"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate dataset with specified id"
          schema:
            $ref: "#/definitions/Error"
        "501":
          description: "Rsync not supported"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /datasets/dataCaptureModule/checksumValidation:
    post:
      consumes:
        - application/json
      summary: sets checksum result
      description: |
        <p>The DCM implementation server is responsible for reporting the checksum validation result back to Dataverse
        after the depositing user has completed running the rsync script.</p>
        <p>If the result is "validation passed" a FileSystemImportJob batch job is started. After the batch job
        is completed, the depositing user will be notified (via Dataverse notifications and email).</p>
        <p>If the result is "validation failed" the depositing user will be notified.</p>
        <p>A detailed status report of the FileSystemImportJob can be polled using the jobStatusUrl from the response.</p>
      parameters:
        - name: body
          in: body
          description: JSON object reporting checksum validation result.
          required: true
          schema:
            $ref: "#/definitions/ChecksumValidationRequest"
        - name: X-Dataverse-key
          in: header
          description: API key of Dataverse super user.
          required: true
          type: string
      tags:
        - "Data Capture Module"
      responses:
        "200":
          description: "Validation script response"
          schema:
            $ref: "#/definitions/ChecksumValidationResponse"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate dataset with specified id"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /admin/batch/jobs:
    get:
      summary: list batch jobs
      description: list batch jobs
      tags:
        - "Batch Job Module"
      produces:
        - application/json
      responses:
        "200":
          description: "Batch job response"
          schema:
            $ref: "#/definitions/BatchJobs"
          examples:
            application/json: |       
              {  
                 "jobs":[  
                    {  
                       "id":209,
                       "name":"FileSystemImportJob",
                       "status":"COMPLETED",
                       "exitStatus":"COMPLETED",
                       "createTime":1475685325307,
                       "endTime":1475685328032,
                       "lastUpdateTime":1475685328032,
                       "startTime":1475685325316,
                       "properties":{  
                          "userId":"dataverseAdmin",
                          "datasetId":"doi:10.15785/SBGRID/168"
                       },
                       "steps":[  
                          {  
                             "id":414,
                             "name":"import-files",
                             "status":"COMPLETED",
                             "exitStatus":"COMPLETED",
                             "endTime":1475685326741,
                             "startTime":1475685325328,
                             "metrics":{  
                                "write_skip_count":0,
                                "commit_count":19,
                                "process_skip_count":0,
                                "read_skip_count":0,
                                "write_count":180,
                                "rollback_count":0,
                                "filter_count":0,
                                "read_count":180
                             },
                             "persistentUserData":null
                          },
                          {  
                             "id":415,
                             "name":"import-checksums",
                             "status":"COMPLETED",
                             "exitStatus":"COMPLETED",
                             "endTime":1475685327992,
                             "startTime":1475685326753,
                             "metrics":{  
                                "write_skip_count":0,
                                "commit_count":19,
                                "process_skip_count":0,
                                "read_skip_count":0,
                                "write_count":180,
                                "rollback_count":0,
                                "filter_count":0,
                                "read_count":180
                             },
                             "persistentUserData":null
                          }
                       ]
                    }
                 ]
              }
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /admin/batch/jobs/name/{jobname}:
    get:
      summary: list jobs by job name
      description: list all jobs that have a particular job name
      parameters:
        - name: jobname
          in: path
          description: job name
          required: true
          type: string
      tags:
        - "Batch Job Module"
      produces:
        - application/json
      responses:
        "200":
          description: "Batch job status"
          schema:
            $ref: "#/definitions/BatchJob"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate batch job with specified id"
          schema:
            $ref: "#/definitions/Error"
        "501":
          description: "Batch job not supported"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /admin/batch/jobs/{id}:
    get:
      summary: get job status by id
      description: gets the status of a particular batch job
      parameters:
        - name: id
          in: path
          description: job execution id
          required: true
          type: integer
      tags:
        - "Batch Job Module"
      produces:
        - application/json
      responses:
        "200":
          description: "Batch job status"
          schema:
            $ref: "#/definitions/BatchJob"
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate batch job with specified id"
          schema:
            $ref: "#/definitions/Error"
        "501":
          description: "Batch job not supported"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
  /batch/jobs/import/datasets/files/{doi1}/{doi2}/{doi3}:
    post:
      summary: import dataset from file system
      description: |
        <p>Imports a dataset's datafiles from the file system.</p>
        <p>Currently, the following import types are supported:
        <ul>
        <li>MERGE (default)</li>
        <li>UPDATE</li>
        <li>REPLACE</li>
        </ul>
        </p>
      parameters:
        - name: doi1
          in: path
          description: DOI prefix.
          required: true
          type: string
        - name: doi2
          in: path
          description: DOI shoulder.
          required: true
          type: string
        - name: doi3
          in: path
          description: DOI suffix.
          required: true
          type: string
        - name: mode
          in: query
          description: Import type (MERGE, UPDATE, REPLACE).
          required: false
          type: string
          default: MERGE
        - name: X-Dataverse-key
          in: header
          description: Dataverse API key of admin user.
          required: true
          type: string
      tags:
        - "Batch Job Module"
      responses:
        "200":
          description: "Post response"
          schema:
            $ref: "#/definitions/GetUploadMechanisms"
          examples:
            application/json: | 
              {
                "status": "OK",
                "data": {
                    "executionId": 208,
                    "message": "FileSystemImportJob in progress"
                }
              }
        "401":
          description: "Unknown API key, insufficient permissions"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Unable to locate dataset with specified DOI"
          schema:
            $ref: "#/definitions/Error"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
definitions:
  BatchJobs:
    type: object
    properties:
      jobs:
        $ref: "#/definitions/BatchJobList"
  BatchJobList:
    type: array
    items:
      $ref: "#/definitions/BatchJob"
  BatchJob:
    type: object
    properties:
      id:
        type: integer
        example: 209
      name:
        type: string
        example: FileSystemImportJob
      status:
        type: string
        example: COMPLETED
      exitStatus:
        type: string
        example: COMPLETED
      createTime:
        type: number
        example: 1475685325307
      endTime:
        type: number
        example: 1475685328032
      lastUpdateTime:
        type: number
        example: 1475685328032
      startTime:
        type: number
        example: 1475685325316
      persistentUserData:
        type: string
        example: "FAILED: exception message..."
      properties:
        $ref: "#/definitions/JobProperties"
      steps:
        $ref: "#/definitions/JobStepList"
  JobProperties:
    type: object
    properties:
      userId:
        type: string
        example: dataverseAdmin
      datasetId:
        type: string
        example: doi:10.15785/SBGRID/168
  JobStepList:
    type: array
    items:
      $ref: "#/definitions/JobStep"
  JobStep:
    type: object
    properties:
      id:
        type: integer
        example: 209
      name:
        type: string
        example: import-files
      status:
        type: string
        example: COMPLETED
      exitStatus:
        type: string
        example: COMPLETED
      endTime:
        type: number
        example: 1475685328032
      startTime:
        type: number
        example: 1475685325316
      metrics:
        $ref: "#/definitions/JobMetrics"
  JobMetrics:
    type: object
    properties:
      write_skip_count:
        type: integer
        example: 0
      commit_count:
        type: integer
        example: 19
      process_skip_count:
        type: integer
        example: 0
      read_skip_count:
        type: integer
        example: 0
      write_count:
        type: integer
        example: 180
      rollback_count:
        type: integer
        example: 0
      filter_count:
        type: integer
        example: 7
      read_count:
        type: integer
        example: 180
  Rsync:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        description: Status of the response
        example: OK
      data:
        $ref: "#/definitions/Script"
  Script:
    type: object
    properties:
      userId:
        type: string
        description: Depositing user identifier
        example: testUser
      datasetId:
        type: integer
        description: Dataset's primary key in the database
        example: 57
      datasetIdentifier:
        type: string
        description: Dataset's unique identifier
        example: ZVBNSE
      script:
        type: string
        description: The rsync script generated by the Data Capture Module implementation
        example: "shell script contents"
  DataCaptureModuleUrl:
    type: object
    required:
      - status
    properties:
      status:
        type: string
        description: Status of the response
        example: OK
      data:
        type: object
        properties:
          DataCaptureModuleUrl:
            type: string
            description: DCM base URL.
            example: "https://datacapture.example.org"
  DataCaptureModuleUrlBody:
    type: string
    description: Base url for the DCM implementation server
  SetUploadMechanisms:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        description: Status of the operation
        example: OK
      data:
        type: object
        properties:
          message:
            type: string
            description: Status of the operation
            example: "File upload mechanisms of dataverse 7d308a66 updated."
  SetUploadMechanismBody:
    type: string
    description: A colon-separated list of supported upload methods
    example: STANDARD:RSYNC:DROPBOX
  GetUploadMechanisms:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        description: Status of the response
        example: "OK"
      data:
        type: array
        items:
          type: string
          enum:
            - STANDARD
            - RSYNC
            - DROPBOX
        example: ["STANDARD", "RSYNC"]
  ChecksumValidationRequest:
    type: object
    required:
      - userId
      - datasetId
      - datasetIdentifier
      - status
    properties:
      userId:
        type: string
        description: Depositing user identifier
        example: dataverseAdmin
      datasetId:
        type: integer
        description: Dataset id (primary key in database)
        example: 57
      datasetIdentifier:
        type: string
        description: Dataset identifier (part of global ID)
        example: ZVBNSE
      status:
        type: string
        description: Status message for failed/passed checksum validation
        example: "validation passed"
        enum:
          - "validation passed"
          - "validation failed"
  ChecksumValidationResponse:
    type: object
    required:
      - status
      - data
    properties:
      status:
        type: string
        description: Status of the request.
        example: "OK"
      data:
        type: object
        required:
          - jobId
          - jobStatusUrl
          - userId
          - datasetId
          - datasetIdentifier
          - message
        properties:
          jobId:
            type: integer
            description: The batch job's execution identifier
            example: 100
          jobStatusUrl:
            type: string
            description: The status URL of the FileSystemImportJob
            example: "https://dv.sbgrid.org/api/batch/job/100"
          userId:
            type: string
            description: Depositing user identifier
            example: testUser
          datasetId:
            type: integer
            description: Dataset's primary key in the database
            example: 57
          datasetIdentifier:
            type: string
            description: Dataset's unique identifier
            example: ZVBNSE
          message:
            type: string
            description: The status of the FileSystemImportJob
            example: "FileSystemImportJob was started."
  RsyncScriptBody:
    type: string
    description: The contents of the rsync script
    example: Contents of script go here...
  Error:
    required:
      - status
      - message
    properties:
      status:
        type: string
        enum:
          - ERROR
          - WARNING
          - INFO
      message:
        type: string